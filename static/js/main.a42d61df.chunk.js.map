{"version":3,"sources":["Web3Util.js","pages/HomePage.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["getInstanceSnowflake","web3","a","eth","getAccounts","window","user","instanceSnowflake","Contract","SnowflakeABI","from","DEMO_SNOWFLAKES","HomePage","props","componentDidMount","Promise","resolve","reject","ethereum","Web3","enable","console","log","process","provider","providers","HttpProvider","contractInstanceSnowflake","setState","loadData","isLoadingHomepageData","interval","setInterval","changeBackgroundImage","state","hasHomepageData","nftIndexSnowflake","snowflakeSelect","isMintingSnowflake","isClaimingRewards","myRewards","ongoing","currentImg","mintSnowflake","bind","incrementSnowflake","decrementSnowflake","this","clearInterval","newCurrentImg","length","methods","call","localValue","utils","toWei","mint","send","value","currentSnowflake","Container","style","textAlign","Grid","container","spacing","item","xs","md","alignItems","display","justifyContent","className","height","borderRadius","src","undefined","padding","Button","onClick","class","React","Component","Routes","exact","path","component","render","App","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a42d61df.chunk.js","sourcesContent":["import Web3 from 'web3';\r\nimport SnowflakeABI from './abi/snowflake.json'\r\n\r\n// testnet \r\nconst contractAddressSnowflake = \"0x1BbE9b7bB88B1082e6370DdA636870feB290c6d7\"\r\n\r\n// mainnet \r\n// const contractAddressSnowflake = \"0x09dFE9196d0460195afc6eC37773E4C621Fb6050\"\r\n\r\nexport const getWeb3 = () =>\r\n    new Promise(async(resolve, reject) => {\r\n    if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n        await window.ethereum.enable();\r\n        resolve(web3);\r\n        } catch (error) {\r\n        reject(error);\r\n        }\r\n    } else if (window.web3) {\r\n        // load metamask provider\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n    } else {\r\n        console.log(process.env.PUBLIC_URL)\r\n        // main net\r\n        // const provider = new Web3.providers.HttpProvider(\"https://api.avax.network/ext/bc/C/rpc\");\r\n\r\n        // test net \r\n        const provider = new Web3.providers.HttpProvider(\"https://api.avax-test.network/ext/bc/C/rpc\");\r\n\r\n\r\n        const web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        resolve(web3);\r\n    }\r\n});\r\nexport const getInstanceSnowflake = async (web3) => {\r\n    window.user = (await web3.eth.getAccounts())[0];\r\n    \r\n    window.instanceSnowflake= new web3.eth.Contract(\r\n        SnowflakeABI,\r\n        contractAddressSnowflake,\r\n        {\r\n            from: window.user\r\n        }\r\n    );\r\n    return window.instanceSnowflake;\r\n}\r\n\r\n","import React from \"react\";\r\nimport {getInstanceSnowflake, getWeb3}  from \"../Web3Util\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst SNOWFLAKE_SUPPLY = 5000\r\nconst SNOWFLAKE_PRICE = 0.25\r\n\r\nconst DEMO_SNOWFLAKES =[\"https://cloudflare-ipfs.com/ipfs/QmSFan2abU3vJrevpvzE1t2avdH6kPcWA8Ke35x5GwrvDM\",\r\n\"https://cloudflare-ipfs.com/ipfs/QmT7ivNgkni4AVVGM41w6aGQrdcqQRKwBkwXHniM1AKYeL\",\r\n\"https://cloudflare-ipfs.com/ipfs/QmcjiKknUFgZLyDGiNY45STAKVegXAP89E9AkVPjhNKVNp\",\r\n\"https://cloudflare-ipfs.com/ipfs/QmX49sxakPLGoKfZ4fe4DcR8pw88pt2BYVhqEiXXgYQ1Wv\",\r\n\"https://cloudflare-ipfs.com/ipfs/Qmf5ec249RwkgNW5Tq6kBfF91PYSPTW81eELHdWGnPWtBn\",\r\n\"https://cloudflare-ipfs.com/ipfs/QmcpRxr2JmosSdD2e3GMQKy6h2NMX15XEyXE73Lj7EJQ6f\",\r\n\"https://cloudflare-ipfs.com/ipfs/QmX4kxWZUGEWQpxKw1e7od9wrsVS7r3i4HN28basVHsPCw\",\r\n\"https://cloudflare-ipfs.com/ipfs/QmZsBcZ2ApSdz3uU7GQSp9ffUeXkD4XVFqNcYEsG6jbxNv\",\r\n\"https://cloudflare-ipfs.com/ipfs/Qme867LeTxaPpwwdYsqGuCjY77L5vPx5J7fRyMCAyAde2v\"]\r\n\r\nclass HomePage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasHomepageData: false,\r\n      isLoadingHomepageData:true,\r\n      nftIndexSnowflake:-100,\r\n      snowflakeSelect:1,\r\n      isMintingSnowflake:false,\r\n      isClaimingRewards:false,\r\n      myRewards:0,\r\n      ongoing:false,\r\n      currentImg: 0\r\n    };\r\n    this.mintSnowflake = this.mintSnowflake.bind(this);\r\n    this.incrementSnowflake = this.incrementSnowflake.bind(this)\r\n    this.decrementSnowflake = this.decrementSnowflake.bind(this)\r\n\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n    try{\r\n      const web3 = await getWeb3();\r\n      window.web3 = web3;\r\n      const contractInstanceSnowflake = await getInstanceSnowflake(window.web3);\r\n\r\n      this.setState({ user: window.user });\r\n      this.setState({ contractInstanceSnowflake});\r\n      await this.loadData();\r\n    } catch (e) {\r\n      console.log('Error', e)\r\n    }finally{\r\n      this.setState({\r\n        isLoadingHomepageData:false\r\n      })\r\n    }\r\n    this.interval = setInterval(() => this.changeBackgroundImage(), 1000);\r\n\r\n  }\r\n  componentWillUnmount() {\r\n    if (this.interval) {\r\n      clearInterval(this.interval);\r\n    }\r\n  }\r\n  changeBackgroundImage() {\r\n    let newCurrentImg = 0;\r\n    const { currentImg} = this.state;\r\n    const noOfImages = DEMO_SNOWFLAKES.length;\r\n\r\n    if (currentImg !== noOfImages - 1) {\r\n      newCurrentImg = currentImg + 1;\r\n    }\r\n\r\n    this.setState({currentImg: newCurrentImg});\r\n  }\r\n  async loadData() {\r\n      try {\r\n        const ongoing = await this.state.contractInstanceSnowflake.methods.ongoing().call();\r\n   \r\n        if(ongoing){\r\n          this.setState({ ongoing });\r\n        }\r\n\r\n        this.setState({hasHomepageData:true})\r\n    } catch (e) {\r\n      console.log('Error', e)\r\n    }\r\n  }\r\n\r\n  async mintSnowflake(){\r\n    try {\r\n        this.setState({isMintingSnowflake:true})\r\n        let localValue = window.web3.utils.toWei((this.state.snowflakeSelect*SNOWFLAKE_PRICE)+\"\", 'ether')\r\n\r\n        await this.state.contractInstanceSnowflake.methods.mint().send(\r\n          {value:localValue}\r\n        )\r\n        await this.loadData()\r\n      } catch (e) {\r\n      console.log('Error', e)\r\n    }finally{\r\n      this.setState({isMintingSnowflake:false})\r\n    }\r\n  }\r\n\r\n  incrementSnowflake(){\r\n    let currentSnowflake = this.state.snowflakeSelect\r\n    if(currentSnowflake<20){\r\n      this.setState({snowflakeSelect:currentSnowflake+1})\r\n    }\r\n  }\r\n\r\n  decrementSnowflake(){\r\n    let currentSnowflake = this.state.snowflakeSelect\r\n    if(currentSnowflake>1){\r\n      this.setState({snowflakeSelect:currentSnowflake-1})\r\n    }\r\n  }\r\n  \r\n\r\n  render() {\r\n    return(\r\n          <Container  style={{textAlign:\"center\"}}>\r\n            <h1>Avalanche Snowflake NFTs</h1>\r\n            <Grid container spacing={2} >\r\n              <Grid item xs={12} md={12} style={{alignItems:\"center\",display:\"flex\",justifyContent:\"center\"}}>\r\n                <div>\r\n                 {/*} {this.state.nftIndexSnowflake>=-1? */}\r\n                  <div style={{textAlign:\"center\"}}>\r\n                    <br />\r\n                    <br />\r\n                    <img className=\"snowflake-icon\" style={{height:\"250px\",borderRadius:\"50%\"}} src={DEMO_SNOWFLAKES[this.state.currentImg]} />\r\n                    <br />\r\n                    <br />\r\n                    <b>5000 unique snowflakes</b>\r\n                  \r\n                  </div>\r\n                  {/* :<>\r\n                    <b>Be the first to mint your snowflake</b>\r\n                  </>}*/}\r\n\r\n                </div>\r\n              </Grid>\r\n              \r\n              {window.user != undefined?\r\n                <Grid item xs={12} md={12} style={{alignItems:\"center\",display:\"flex\",justifyContent:\"center\", padding:0}}>\r\n                  <div>\r\n                    {this.state.isMintingSnowflake?\r\n                      <b>Minting...</b>\r\n                      :\r\n                    <div>\r\n                      {this.state.ongoing?\r\n                       <Button onClick={()=>this.mintSnowflake()}>Mint {this.state.snowflakeSelect} snowflake for {this.state.snowflakeSelect*SNOWFLAKE_PRICE} $AVAX</Button>\r\n                      :null}\r\n                    </div>\r\n                    }\r\n                  </div>\r\n                </Grid>\r\n            :\r\n            <Grid item xs={12} md={12} style={{alignItems:\"center\",display:\"flex\",justifyContent:\"center\"}}>\r\n                \r\n                <b>Connect your wallet to the website to mint your NFTs.</b>\r\n\r\n            </Grid>\r\n            }\r\n           \r\n            </Grid>\r\n            <div class=\"snowflakes\" aria-hidden=\"true\">\r\n  <div class=\"snowflake\">\r\n  ❅\r\n  </div>\r\n  <div class=\"snowflake\">\r\n  ❆\r\n  </div>\r\n  <div class=\"snowflake\">\r\n  ❅\r\n  </div>\r\n  <div class=\"snowflake\">\r\n  ❆\r\n  </div>\r\n  <div class=\"snowflake\">\r\n  ❅\r\n  </div>\r\n  <div class=\"snowflake\">\r\n  ❆\r\n  </div>\r\n  <div class=\"snowflake\">\r\n    ❅\r\n  </div>\r\n  <div class=\"snowflake\">\r\n    ❆\r\n  </div>\r\n  <div class=\"snowflake\">\r\n    ❅\r\n  </div>\r\n  <div class=\"snowflake\">\r\n    ❆\r\n  </div>\r\n  <div class=\"snowflake\">\r\n    ❅\r\n  </div>\r\n  <div class=\"snowflake\">\r\n    ❆\r\n  </div>\r\n</div>\r\n          </Container>\r\n       \r\n    )\r\n  }\r\n}\r\n\r\nexport default HomePage;\r\n","import React from \"react\";\r\nimport {Route, Switch ,HashRouter} from \"react-router-dom\";\r\n\r\nimport HomePage from './pages/HomePage';\r\n\r\nclass Routes extends React.Component {\r\n  render() {\r\n    return (\r\n      <HashRouter>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={HomePage} />\r\n        <Route exact path=\"/home\" component={HomePage} />\r\n\r\n      <Route\r\n        render={function() {\r\n          return <h1>Not Found</h1>;\r\n        }}\r\n      />\r\n    </Switch>\r\n    </HashRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Routes;\r\n","import React from \"../node_modules/react\";\r\nimport \"./App.css\";\r\nimport \"./index.css\";\r\nimport { BrowserRouter as Router } from \"../node_modules/react-router-dom\";\r\nimport Routes from \"./Routes\";\r\n\r\nclass App extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <Routes />\r\n      </Router>\r\n    );\r\n  }\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}